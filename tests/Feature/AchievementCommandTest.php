<?php

namespace Tests\Feature;

use App\Models\Achievement;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\File;
use Tests\TestCase;
use function PHPUnit\Framework\assertTrue;

class AchievementCommandTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Cache::forget('test_achievements');
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_it_can_generate_the_achievement_class()
    {
        $this->artisan('make:achievement TestAchievement');
        self::assertTrue(File::exists($path = app_path('Achievement/Badge/TestAchievement.php')));
        assertTrue(str_contains(File::get($path), 'TestAchievement'));
        File::delete($path);
    }

    public function test_achievements_can_be_seed_for_all_users_base_on_their_point_via_command()
    {
        $firstThousandAchievement = Achievement::factory()->create(['name' => 'First Thousand Point', 'desc' => 'Greate job! You are on right way',
            'icon_path' => 'first-thousand.svg', 'class_name' => 'FirstThousandPoint']);
        $secondThousandAchievement = Achievement::factory()->create(['name' => 'Two Thousand Point', 'desc' => 'Two thousand point',
            'icon_path' => 'two.svg', 'class_name' => 'TwoThousandPoint']);
        $thirdThousandAchievement = Achievement::factory()->create(['name' => 'Three Thousand Point', 'desc'=> 'Three thousand point',
            'icon_path' => 'three.svg', 'class_name' => 'ThreeThousandPoint']);

        $user1 = User::factory()->create(['point' => 1000]);
        $user2 = User::factory()->create(['point' => 2000]);

        $this->assertDatabaseMissing('achievement_user', [
            'user_id' => $user1->id,
            'achievement_id' => $firstThousandAchievement->id
        ]);

        $this->assertDatabaseMissing('achievement_user', [
            'user_id' => $user2->id,
            'achievement_id' => $firstThousandAchievement->id
        ]);
        $this->assertDatabaseMissing('achievement_user', [
            'user_id' => $user2->id,
            'achievement_id' => $secondThousandAchievement->id
        ]);

        $this->artisan('users:seed-achievements');

        $this->assertDatabaseHas('achievement_user', [
            'user_id' => $user1->id,
            'achievement_id' => $firstThousandAchievement->id
        ]);

        $this->assertDatabaseHas('achievement_user', [
            'user_id' => $user2->id,
            'achievement_id' => $firstThousandAchievement->id
        ]);
        $this->assertDatabaseHas('achievement_user', [
            'user_id' => $user2->id,
            'achievement_id' => $secondThousandAchievement->id
        ]);

    }
}
